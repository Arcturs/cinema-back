openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: localhost
    url: http://localhost:8080
info:
  version: "1.0.0"
  title: Online cinema API
  description: Project made for VSU
  contact:
    name: Anastasiya Sashina
    email: yaninastya2010@yandex.ru

paths:

  # ----------------------------------------------------------------------
  #                                 movie
  # ----------------------------------------------------------------------

  /movie/:
    get:
      tags:
        - Movie
      description: Returns all movies in pages
      parameters:
        - in: query
          name: pageNumber
          schema:
            type: integer
            default: 1
        - in: query
          name: size
          schema:
            type: integer
            default: 5
        - in: query
          name: title
          schema:
            type: string
        - in: query
          name: sort
          schema:
            $ref: '#/components/schemas/MovieSort'
        - in: query
          name: isAsc
          schema:
            type: boolean
            default: true
      responses:
        200:
          description: Returns all movies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Paging'
        400:
          description: Invalid query params
          content:
            application/json:
              schema:
                type: string
    post:
      tags:
        - Movie
      description: Creates movie
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MovieRequest'
      responses:
        201:
          description: Movie was successfully created
        400:
          description: Invalid requestBody
          content:
            application/json:
              schema:
                type: string

  /movie/{id}:
    get:
      tags:
        - Movie
      description: Gets movie info by ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
      responses:
        200:
          description: Movie was successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieResponse'
        400:
          description: Invalid id type
          content:
            application/json:
              schema:
                type: string
        404:
          description: Movie with following id does not exist
          content:
            application/json:
              schema:
                type: string
    delete:
      tags:
        - Movie
      description: Deletes movie by id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
      responses:
        204:
          description: Movie was successfully deleted
        400:
          description: Invalid id type
          content:
            application/json:
              schema:
                type: string
    put:
      tags:
        - Movie
      description: Updates movie by id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MovieRequest'
      responses:
        200:
          description: Movie was successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieResponse'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                type: string
        404:
          description: Movie with following id does not exist
          content:
            application/json:
              schema:
                type: string
        409:
          description: Cannot be updated due to conflict
          content:
            application/json:
              schema:
                type: string

  /movie/{id}/poster:
    get:
      tags:
        - Movie
      description: Gets movie's poster by id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
      responses:
        200:
          description: Movie's poster was successfully fetched
          content:
            image/png:
              schema:
                type: string
                format: binary
        400:
          description: Invalid id type
          content:
            application/json:
              schema:
                type: string
        404:
          description: Movie with following id does not exist
          content:
            application/json:
              schema:
                type: string

  /movie/{id}/sessions:
    get:
      tags:
        - Movie
      description: Gets sessions for specific movie
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
        - in: query
          name: pageNumber
          schema:
            type: integer
            default: 1
        - in: query
          name: size
          schema:
            type: integer
            default: 5
      responses:
        200:
          description: Shows all sessions for certain movie
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Paging'
        400:
          description: Invalid id type
          content:
            application/json:
              schema:
                type: string

# ----------------------------------------------------------------------

components:
  schemas:
    MovieSort:
      type: object
      properties:
        sort:
          type: string
          enum: [ BY_TITLE, BY_RATING, BY_DURATION ]

    Paging:
      type: object
      properties:
        paging:
          type: object
          properties:
            pageNumber:
              type: integer
            pageSize:
              type: integer
            totalPages:
              type: integer
        data:
          type: array
          items:
            type: object

    MovieRequest:
      type: object
      properties:
        description:
          type: string
          nullable: false
        duration:
          type: string
          format: time
          example: "HH:mm"
        title:
          type: string
          nullable: false
        poster:
          type: string
          format: binary

    MovieResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        description:
          type: string
        duration:
          type: string
          format: time
          example: "HH:mm"
        title:
          type: string
        rating:
          type: number
          format: double